name: Publish

on:
  push:
    tags:
      - "v*"

jobs:
  buildserver:
    name: "Build Server"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: server
          platforms: linux/amd64
          push: false
          tags: lavalleeale/remoteftc:latest
  buildelectron:
    name: "Build Electron"
    defaults:
      run:
        shell: bash
        working-directory: web
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@master

      - uses: actions/setup-node@master
        with:
          node-version: 16.13

      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@master
        with:
          version: latest

      - name: Install dependencies
        run: pnpm i

      - name: Build
        run: pnpm electron:build

      - name: Archive macOS production artifacts
        if: ${{matrix.os == 'macos-latest'}}
        uses: actions/upload-artifact@v2
        with:
          name: RemoteFTC-mac-x64
          path: web/dist/RemoteFTC-mac-x64.dmg

      - name: Archive Linux production artifacts
        if: ${{matrix.os == 'ubuntu-latest'}}
        uses: actions/upload-artifact@v2
        with:
          name: RemoteFTC-linux-x86_64
          path: web/dist/RemoteFTC-linux-x86_64.AppImage

      - name: Archive Windows production artifacts
        if: ${{matrix.os == 'windows-latest'}}
        uses: actions/upload-artifact@v2
        with:
          name: RemoteFTC-win-x64
          path: web/dist/RemoteFTC-win-x64.exe
  test:
    name: "Test with Cypress"
    runs-on: ubuntu-latest
    needs:
      - buildelectron
      - buildserver
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-
      - name: Setup dependancy caching
        uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.27.1
      - name: Install dependencies
        run: pnpm --dir web i

      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          install: false
          build: pnpm build
          start: pnpm start
          working-directory: web
  publishserver:
    name: "Publish Server"
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: server
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/lavalleeale/remoteftc:latest
  publishclientrelease:
    runs-on: ubuntu-latest
    name: Publish Client Release
    needs: [buildelectron, test]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
  # Add all the builds as assets to the release
  publishclientartifactsrelease:
    runs-on: ubuntu-latest
    name: Add Client Artifacts to Release
    needs: publishclientrelease
    strategy:
      matrix:
        target:
          [
            { "name": "RemoteFTC-win-x64", "extension": "exe" },
            { "name": "RemoteFTC-mac-x64", "extension": "dmg" },
            { "name": "RemoteFTC-linux-x86_64", "extension": "AppImage" },
          ]
    steps:
      - uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@v2
        id: download
        with:
          name: ${{ matrix.target.name }}

      - name: Upload Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publishclientrelease.outputs.upload_url }}
          asset_path: ${{steps.download.outputs.download-path}}/${{ matrix.target.name }}.${{ matrix.target.extension }}
          asset_name: ${{ matrix.target.name }}.${{ matrix.target.extension }}
          asset_content_type: application/octet-stream
  publishweb:
    name: "Publish To Netlify"
    needs: test
    defaults:
      run:
        shell: bash
        working-directory: web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - uses: actions/setup-node@master
        with:
          node-version: 16.13

      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@master
        with:
          version: latest

      - name: Install dependencies
        run: pnpm i

      - name: Build
        run: pnpm build

      - name: Publish
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=web/dist
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
